import dlib
import numpy as np
import cv2
import csv
import os
import shutil
import time
import logging
import tkinter as tk
from tkinter import font as tkFont
from PIL import Image, ImageTk
import subprocess
import mysql.connector
from mysql.connector import Error

def connect_to_database():
        # """connect with database MySQL"""
        try:
            connection = mysql.connector.connect(
                host='127.0.0.1',  # address host of MySQL
                database='studentdb',  # name of database
                user='user',  # Username of MySQL
                password='user',  # Password of MySQL
                port='3309',
                raise_on_warnings=True  # keep informed if there's error 
            )
            # Database connection configuration
            # Database connection configuration
            if connection.is_connected():
                print("Success! Connected to MySQL database.")
                return connection
        except Error as e:
            print(f"fail to connect with MySQL database: {e}")
            return None

def get_face_database():
        connection = connect_to_database()
        if connection:
            cursor = connection.cursor()
            query = "SELECT feature_vector FROM Student ORDER BY student_id ASC LIMIT 3"
            # Execute the query
            cursor.execute(query)
            
            # Fetch all results from the query
            rows = cursor.fetchall()  # Fetch multiple rows

            feature_vectors = []
            for row in rows:
                feature_vector_str = row[0]  # Each row is a tuple, get the first element (feature_vector string)
                feature_vector_list = list(map(float, feature_vector_str.split(',')))  
                feature_vectors.append(feature_vector_list)
            print(feature_vectors)
            cursor.close()
            connection.close()
        else:
            print("Connection to the database failed.")

get_face_database()
# feature_vector_str = "-0.07291254810988904,0.09814447909593582,0.04164188727736473,-0.03032720759510994,-0.08739526718854904,-0.021730219572782518,-0.08023011237382889,-0.07676087841391563,0.15864129811525346,-0.07720943912863731,0.2101309686899185,-0.045178354158997534,-0.19419622123241426,-0.05581501051783562,0.0023039035499095918,0.15076130628585815,-0.15448689609766006,-0.07483271211385727,-0.05351696349680424,-0.017872093245387077,0.04898047596216202,0.10757856369018555,0.006610976904630661,0.04755304753780365,-0.08291495144367218,-0.3256256878376007,-0.08896077573299407,-0.08421722948551177,0.03262838274240494,-0.0517760306596756,-0.08885978758335114,0.0398830208927393,-0.10954421013593674,-0.07400212064385414,0.07577913627028465,0.10132819637656212,-0.044513695128262046,-0.06869197338819504,0.20825932919979095,-0.01777622401714325,-0.23031625151634216,0.05762802213430405,0.07085249125957489,0.23452866673469544,0.20699126422405242,0.044849943928420545,0.008524622209370137,-0.1650708496570587,0.1652251422405243,-0.17353440225124359,0.038934686407446864,0.16917292177677154,0.040782394260168074,0.07740098536014557,-0.0009966363199055196,-0.1418252944946289,-0.0006085699424147606,0.13934493958950042,-0.15052019953727722,0.003933273255825043,0.06883103922009468,-0.10945117324590684,-0.0070304999127984045,-0.04945396557450295,0.17987096011638642,0.044139917194843295,-0.12014059126377105,-0.20718172788619996,0.054522180929780006,-0.18691153228282928,-0.10081201791763306,0.12008628100156785,-0.14469468593597412,-0.18128948509693146,-0.31031373143196106,0.03985025435686111,0.4085328638553619,0.079571932554245,-0.15876261591911317,0.07368333712220192,-0.03518896773457527,-0.07707180008292198,0.12210916429758072,0.18181610405445098,0.0034797679632902145,-0.03384139239788055,-0.09035638272762299,-0.005653287470340729,0.26818978786468506,-0.06978061720728874,0.005180848762392998,0.2125589966773987,0.024470752477645873,0.12244168668985367,0.0039020229130983354,0.08194630295038223,-0.08179232031106949,0.014461276307702064,-0.10251933932304383,-0.02177266925573349,0.05738770132884383,-0.027369354292750357,-0.0016224164515733718,0.11503860652446747,-0.20010510683059693,0.17171115875244142,0.008001527190208435,0.01888180784881115,0.05460267383605242,-0.05055541731417179,-0.04429072178900242,-0.04759119153022766,0.1780476838350296,-0.21727508902549744,0.1721254765987396,0.15059131383895874,0.08745820820331573,0.14473328590393067,0.10346627160906792,0.083634664863348,-0.015022392012178898,-0.02081657648086548,-0.22616093456745148,-0.01897650696337223,0.07748851478099823,0.006020051706582308,0.07278410941362382,0.0054262328892946245"
# # # Bước 1: Tách chuỗi thành danh sách các số thực
# feature_vector_list = list(map(float, feature_vector_str.split(',')))

# # Bước 2: Chuyển danh sách thành numpy array để so sánh
# feature_vector_array = np.array(feature_vector_list)

# # In ra kết quả
# print(feature_vector_array)
